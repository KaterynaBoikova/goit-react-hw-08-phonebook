{"version":3,"sources":["Components/Contacts/Contacts.module.css","Components/ContactForm/ContactForm.module.css","Styles/PhonebookView.module.css","Redux/Phonebook/contacts-operations.js","Redux/Phonebook/contacts-selectors.js","Components/ContactForm/ContactForm.js","Components/Contacts/ContactList.js","Components/Contacts/ContactFilter.js","Views/PhonebookView.js"],"names":["module","exports","axios","defaults","baseURL","inputData","dispatch","contact","name","number","actions","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","contactID","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getFilter","state","phonebook","filter","getContacts","contacts","getLoading","loading","getFilteredContacts","createSelector","allContacts","normalizedFilter","toLowerCase","includes","ContactForm","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","contactsIn","find","alert","submitted","className","styles","form","onSubmit","this","inputForm","type","pattern","title","required","onChange","btnAdd","Component","connect","contactsSelectors","contactsOperations","ContactList","fetchContacts","isLoadingContacts","color","height","width","style","textAlign","map","id","onClick","onDeleteContact","searchQuery","contactsActions","changeFilter","search","PhonebookView","Layout","flexwrap","formAdd","contactsList"],"mappings":"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","file":"static/js/phonebook.cd1f9922.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contacts_contact__3_TQl\",\"search\":\"Contacts_search__3rC8e\",\"delete\":\"Contacts_delete__16OwR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForm\":\"ContactForm_inputForm__2de9Q\",\"btnAdd\":\"ContactForm_btnAdd__2M8yM\",\"form\":\"ContactForm_form__2IF4m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexwrap\":\"PhonebookView_flexwrap__1SSon\",\"formAdd\":\"PhonebookView_formAdd__KXm-t\",\"contactsList\":\"PhonebookView_contactsList__2mIT3\"};","import axios from \"axios\";\nimport actions from './contacts-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst fetchContacts =()=>dispatch=>{\n    dispatch(actions.fetchContactsRequest());\n\n    axios.get('/contacts')\n        .then(({data})=>dispatch(actions.fetchContactsSuccess(data)))\n        .catch(error=>dispatch(actions.fetchContactsError()))\n};\nconst addContact = inputData => dispatch=>{\n    const contact={\n        name: inputData.name, number: inputData.number\n    };\n    dispatch(actions.addContactRequest());\n\n    axios.post('/contacts', contact)\n        .then(({data})=>\n            dispatch(actions.addContactSuccess(data)))\n        .catch(error=>dispatch(actions.addContactError()))\n};\nconst deleteContact = contactID => dispatch =>{\n    dispatch(actions.deleteContactRequest());\n    axios.delete(`/contacts/${contactID}`)\n        .then(()=>\n            dispatch(actions.deleteContactSuccess(contactID)))\n        .catch(error=>dispatch(actions.deleteContactError()))\n};\n\nexport default {addContact, deleteContact, fetchContacts};","import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state=>state.phonebook.loading;\nconst getFilter = state=>state.phonebook.filter;\nconst getContacts = state=>state.phonebook.contacts;\n\nconst getFilteredContacts = createSelector(\n    [getContacts, getFilter],\n    (allContacts, filter)=>{\n        const normalizedFilter = filter.toLowerCase();\n        return allContacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter),\n        );}\n    );\nexport default {\n    getLoading,\n    getFilter,\n    getContacts,\n    getFilteredContacts,\n};\n\n","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport styles from './ContactForm.module.css';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../Redux/Phonebook/contacts-operations';\nimport contactsSelectors from '../../Redux/Phonebook/contacts-selectors';\n\nclass ContactForm extends Component{\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handleChange = event => {\n        const { name, value } = event.currentTarget;\n        this.setState({ [name]: value });\n    };\n\n\n    handleSubmit = event => {\n        event.preventDefault();\n        if(this.props.contactsIn.find(({name})=>name===this.state.name)){\n            alert(this.state.name+'is already in contacts');\n            return;\n        }\n    this.props.submitted(this.state);\n    this.setState({ name: '', number: ''});\n};\n\n    render(){\n        return(\n            <form className={styles.form} onSubmit={this.handleSubmit}>\n                <label>Name\n                    <input\n                        className={styles.inputForm}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                    /></label>\n                <label>Phone\n                    <input\n                        className={styles.inputForm}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                        value={this.state.number}\n                        onChange={this.handleChange}\n                    /></label>\n                <button\n                    className={styles.btnAdd}\n                    type=\"submit\" >Add Contact</button>\n            </form>\n        )\n\n}};\n\nContactForm.propTypes = {\n    submitted: PropTypes.func,\n    contactsIn: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string,\n        })),\n};\nconst mapStateToProps = state => ({\n    contactsIn: contactsSelectors.getContacts(state),\n});\nconst mapDispatchToProps = dispatch => ({\n    submitted: contact => dispatch(contactsOperations.addContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React, {Component} from 'react'\nimport PropTypes from \"prop-types\";\nimport styles from './Contacts.module.css';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../Redux/Phonebook/contacts-operations';\nimport contactsSelectors from '../../Redux/Phonebook/contacts-selectors';\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nclass ContactList extends Component{\n    componentDidMount() {\n        this.props.fetchContacts();\n    }\n\n    render() {\n        return(\n            <>\n            {this.props.isLoadingContacts &&\n            <Loader\n                type=\"ThreeDots\"\n                color=\"teal\"\n                height={130}\n                width={130}\n                style={{\n                    textAlign: \"center\",\n                }}\n            />}\n            <ul>\n                {this.props.contacts.map(({id, name, number})=>(\n                        <li key={id}>\n                            <p className={styles.contact}>{name}: {number}</p>\n                            <button className={styles.delete} type='button' onClick={() => this.props.onDeleteContact(id)}>Delete</button>\n                        </li>\n                    )\n                )}\n            </ul>\n                </>\n        )\n    }\n}\n\nContactList.propTypes = {\n    onDeleteContact: PropTypes.func,\n    fetchContacts: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string,\n        })),\n};\n\nconst mapStateToProps = (state) => ({\n    isLoadingContacts: contactsSelectors.getLoading(state),\n    contacts: contactsSelectors.getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchContacts: ()=>dispatch(contactsOperations.fetchContacts()),\n    onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react'\nimport PropTypes from \"prop-types\";\nimport styles from './Contacts.module.css';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../Redux/Phonebook/contacts-actions';\nimport contactsSelectors from '../../Redux/Phonebook/contacts-selectors';\n\nconst ContactFilter = ({ searchQuery, onChange }) => (\n    <label>\n        Filter contacts by name\n        <input className={styles.search} type=\"text\" value={searchQuery} onChange={onChange} />\n    </label>\n);\n\n\nContactFilter.propTypes = {\n    searchQuery: PropTypes.string,\n    onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n    searchQuery: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: event => dispatch(contactsActions.changeFilter(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);","import React from 'react';\nimport ContactForm from '../Components/ContactForm/ContactForm.js';\nimport ContactList from \"../Components/Contacts/ContactList\";\nimport ContactFilter from \"../Components/Contacts/ContactFilter\";\nimport Layout from \"../Components/Layout/Layout\";\nimport styles from '../Styles/PhonebookView.module.css';\nconst PhonebookView=()=>{\n    return(\n        <Layout>\n        <div className={styles.flexwrap}>\n            <div className={styles.formAdd}>\n            <h2>Phonebook</h2>\n            <ContactForm />\n        </div>\n            <div className={styles.contactsList}>\n            <h2>Contacts</h2>\n            <ContactFilter />\n            <ContactList />\n            </div>\n        </div>\n            </Layout>\n    )\n};\n\nexport default PhonebookView;"],"sourceRoot":""}